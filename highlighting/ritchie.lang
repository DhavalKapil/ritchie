<?xml version="1.0" encoding="UTF-8"?>
<language id="rit" _name="Ritchie" version="2.0" _section="Source" extensions="*.rit">
<metadata>
    <property name="mimetypes">text/x-c;text/x-csrc;image/x-xpixmap</property>
    <property name="globs">*.c</property>
    <property name="line-comment-start">//</property>
</metadata>

<styles>
    <style id="comment"           _name="Comment"               map-to="def:comment"/>
    <style id="string"            _name="String"                map-to="def:string"/>
    <style id="operator"          _name="Operator"              map-to="def:operator"/>
    <style id="type"              _name="Data Type"             map-to="def:type"/>
    <style id="print"             _name="printf Conversion"     map-to="def:special-char"/>
    <style id="escaped-character" _name="Escaped Character"     map-to="def:special-char"/>
    <style id="floating-point"    _name="Floating point number" map-to="def:floating-point"/>
    <style id="boolean"           _name="Boolean value"         map-to="def:boolean"/>
    <style id="error"             _name="Error"                 map-to="def:error"/>
  </styles>

<definitions>

    <!--regexs-->
    <define-regex id="escaped-character" extended="true">
      \\(                   # leading backslash
      [\\\"\'nrbtfav\?] |   # escaped character
      )
    </define-regex>

   <!-- handling the print statement -->
    <context id="print" style-ref="print" extend-parent="false">
      <match extended="true">
        .*
      </match>
    </context>

    <context id="string" style-ref="string" end-at-line-end="true" class="string" class-disabled="no-spell-check">
      <start>L?"</start>
      <end>"</end>
      <include>
        <context ref="print"/>
        <context id="escaped-character" style-ref="escaped-character">
          <match>\%{escaped-character}</match>
        </context>
        <context ref="def:line-continue"/>
      </include>
    </context>

    <context id="char" style-ref="char">
      <match>L?'(\%{escaped-character}|.)'</match>
    </context>
    
    <context id="float" style-ref="floating-point">
      <match extended="true">
        (?&lt;![\w\.])
        ((\.[0-9]+ | [0-9]+\.[0-9]*) ([Ee][+-]?[0-9]*)? |
         ([0-9]+[Ee][+-]?[0-9]*))
        [fFlL]?
        (?![\w\.])
      </match>
    </context>

     <context id="keywords" style-ref="keyword">
      <keyword>while</keyword>
      <keyword>-></keyword>
      <keyword>if</keyword>
      <keyword>else</keyword>
      <keyword>elif</keyword>
      <keyword>for</keyword>
      <keyword>$</keyword>
    </context>

    
  <context id="types" style-ref="type">
       <keyword>Float</keyword>
       <keyword>Integer</keyword>
       <keyword>Number</keyword>
       <keyword>BaseType</keyword>
       <keyword>String</keyword>
    </context>

<!--Main context-->
    <context id="rit" class="no-spell-check">
      <include>
        <context ref="gtk-doc:inline-docs-section"/>
        <context ref="def:c-like-comment"/>
        <context ref="def:c-like-comment-multiline"/>
        <context ref="def:c-like-close-comment-outside-comment"/>
        <context ref="if0-comment"/>
        <context ref="include"/>
        <context ref="preprocessor"/>
        <context ref="string"/>
        <context ref="char"/>
        <context ref="float"/>
        <context ref="hexadecimal"/>
        <context ref="invalid-hexadecimal"/>
        <context ref="octal"/>
        <context ref="invalid-octal"/>
        <context ref="decimal"/>
        <context ref="keywords"/>
        <context ref="operators"/>
        <context ref="types"/>
        <context ref="storage-class"/>
        <context ref="boolean"/>
        <context ref="common-defines"/>
        <context ref="standard-streams"/>
        <context ref="signals"/>
      </include>
    </context>

  </definitions>
</language>

