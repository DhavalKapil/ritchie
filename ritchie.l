%{
/* need this for the call to atoi(), atof() below */
#include <math.h>
#include <string.h>
#include "ObjectTree.h"
#include "ritchie.tab.h" /* Generated by bison. */
#include "ritc.h"

//#define YY_DECL extern int yylex ( YYSTYPE * lvalp, YYLTYPE * llocp, yyscan_t scanner )
%}

%option bison-bridge bison-locations

/* | + && + += -= *= /= */
alphabetic    [a-zA-Z]
numeral       [0-9]
alphanumeric  {alphabetic}|{numeral}
integer       {numeral}+
float         {numeral}+"."{numeral}*
identifier    {alphabetic}{alphanumeric}*

mathOp        "+"|"-"|"*"|"/"|"^^"
assignment    "="

mathAssign    "+=" | "-=" | "*=" | "/="
bitwiseOp       "||" | "&&"

objectLink    "::"
conditionLink "?"


%%

{integer}     { printf("lexer: int\n");    yylval->ival = atoi(yytext);   return INT; }
{float}       { printf("lexer: float\n");  yylval->fval = atof(yytext);   return FLOAT; }
{mathOp}      { printf("lexer: mathOp\n"); yylval->sval = strdup(yytext); return MATH_OP; }
{identifier}  { printf("lexer: ident\n");  yylval->sval = strdup(yytext);
                Object* exists = findByName(yytext);
                if (!exists || exists->type == Variable)
                  return IDENT;
                else if (exists->type == Function)
                  return VERB;
                else if (exists->type == Type)
                  return TYPE;
                else
                  return IDENT;
              }
{assignment}  { yylval->sval = strdup(yytext);
                return ASSIGNMENT; }
{mathAssign}  {yyval->sval = strdup(yytext);
                return MATHASSIGN; }
{bitwiseOp}   {yyval->sval = strdup(yytext);
                return BITWISEOP; }
{conditionLink} { yylval->sval = strdup(yytext);
                    return CONDITIONLINK; }
=======
{assignment}  { printf("lexer: asignment\n"); yylval->sval = strdup(yytext); return ASSIGNMENT; }
[\n]          return ENDOFLINE;
<<EOF>>       return ENDOFFILE;
[ \t]+        /* eat up whitespace */
"("           { printf("lexer: (\n"); return LPAREN; }
")"           { printf("lexer: )\n"); return RPAREN; }
.             /* do nothing? */
%%


